"""A holder for a recipe note.

If the requested note is not found, create an empty one.
The file name is note_date_time.json.
"""

from pathlib import Path
from typing import Self

from recipamatic.config.recipamatic_config import get_recipamatic_paths
from recipamatic.cook.recipe_note.model import RecipeNote
from recipamatic.utils.datetime_ import generate_timestamp_code
from recipamatic.utils.pathlib_ import check_create_fol


class RecipeNoteHolder:
    """A holder for a recipe note."""

    def __init__(
        self,
        note_code: str,
    ) -> None:
        """Create a holder for a recipe note."""
        self.notes_fol = get_recipamatic_paths().notes_fol
        self.note_code = note_code

    @classmethod
    def from_note_code(cls, note_code: str) -> Self:
        """Create a holder from a note code."""
        note = cls(note_code=note_code)
        note.load_note()
        return note

    @classmethod
    def new_note(cls) -> Self:
        """Create a holder for a new note."""
        note_code = cls.generate_note_code()
        note = cls(note_code=note_code)
        note.create_note()
        return note

    @staticmethod
    def generate_note_code() -> str:
        """Get the note code for the timestamp."""
        # the autogenerated note_code is the timestamp but just for ease of generating a unique code
        # which actually might fail if multiple notes are created in the same second
        return generate_timestamp_code()

    def build_note_fp(self) -> Path:
        """Build the file path for the note."""
        return self.notes_fol / f"{self.note_code}.json"

    def load_note(self) -> None:
        """Load the note from the file."""
        note_fp = self.build_note_fp()

        # if the file is not found, fails
        if not note_fp.exists():
            raise FileNotFoundError(f"Note not found: {note_fp}")

        # load the note from the file
        self.note = RecipeNote.model_validate_json(note_fp.read_text())

    def create_note(self) -> None:
        """Create a new note."""
        self.generate_note_code()
        self.note = RecipeNote()
        self.save_note()

    def save_note(self) -> None:
        """Save the note to the file."""
        note_fp = self.build_note_fp()
        check_create_fol(note_fp.parent)
        note_fp.write_text(self.note.model_dump_json(indent=4))
